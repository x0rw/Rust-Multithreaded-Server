use std::{mem, vec};

use serde_json::Error;

use crate::{
    error::{self, Error, Result},
    http_builder::HttpBuilder,
};

pub enum AuthType {
    Bearer,
    Basic,
    Digest,
    OAuth,
}
pub enum ContentType {
    JSON,
}
struct Auth {
    auth_type: AuthType,
    value: String,
}
pub struct HttpHeader {
    content_type: Option<ContentType>,
    content_lenght: Option<u32>,
    Host: Option<String>,
    Authorization: Option<Auth>,
}
impl HttpBuilder {
    fn new(headers: &str) -> Result<String> {
        let lines = headers
            .split("\r\n")
            .filter(|&x| !x.is_empty())
            .collect::<String>();
        match lines.split_once(":") {
            Some((key, value)) => {
                if value.is_empty() {
                    return Err(error::Error::EmptyHeaderField);
                }
            }
            None => return Err(error::Error::InvalidHeader),
        }

        Ok(String::new())
    }
}
